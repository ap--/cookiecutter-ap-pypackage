name: {{ cookiecutter.project_slug }}

on: [push, pull_request]

jobs:
  # RUN PYTEST ON SOURCE
  tests:
    name: {% raw %}pytest ${{ matrix.os }}::py${{ matrix.python-version }}{% endraw %}
    runs-on: {% raw %}${{ matrix.os }}{% endraw %}
    strategy:
      max-parallel: 7
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.11"]
        include:
          # we'll test the python support on ubuntu
          - os: ubuntu-latest
            python-version: "3.10"
          - os: ubuntu-latest
            python-version: "3.9"
          - os: ubuntu-latest
            python-version: "3.8"
          - os: ubuntu-latest
            python-version: "3.7"
    steps:
    - uses: actions/checkout@v3

    - name: Create the environment.yml via conda-devenv
      shell: bash
      run: |
        python -m pip install --upgrade pip setuptools
        python -m pip install packaging jinja2 pyyaml
        python -m pip install git+https://github.com/ESSS/conda-devenv.git@$(curl https://api.github.com/repos/esss/conda-devenv/releases/latest -s | jq .name -r)
        python -m conda_devenv.devenv --env {{ cookiecutter.project_slug.upper() }}_DEVEL=TRUE --file environment.devenv.yml --print > environment.yml

    - name: Cache conda
      uses: actions/cache@v3
      env:
        # Increase this value to reset cache if etc/example-environment.yml has not changed
        CACHE_NUMBER: 0
      with:
        path: ~/conda_pkgs_dir
        key: {% raw %}${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{ hashFiles('environment.yml') }}{% endraw %}

    - name: Setup conda
      uses: conda-incubator/setup-miniconda@v2
      with:
        environment-file: environment.yml
        python-version: {% raw %}${{ matrix.python-version }}{% endraw %}
        auto-update-conda: true
        activate-environment: {{cookiecutter.conda_env}}
        use-only-tar-bz2: true
        auto-activate-base: false
        miniforge-variant: Mambaforge
        use-mamba: True

    - shell: bash -l {0}
      name: Test with pytest
      run: |
        conda info
        conda list
        pytest --cov=./{{cookiecutter.project_slug}} --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        name: {{cookiecutter.conda_env}}

  # RUN MYPY STATIC TYPE ANALYSIS ON SOURCE
  typing:
    name: mypy type analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade setuptools
          pip install -e .[dev]
      - name: Run mypy
        run: |
          mypy {{cookiecutter.project_slug}}

  # DEPLOY TO TEST.PYPI ON SUCCESS
  test_deploy:
    needs: [tests, typing]
    name: deploy to test.pypi
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python {% raw %}${{ matrix.python-version }}{% endraw %}
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
      - name: Install pep517
        run: >-
          python -m
          pip install
          pep517
          --user
      # we'll have to remove local_scheme for pushes to test.pypi pep440
      - name: Get version without local_scheme
        id: non_local_version
        run: |
          python setup.py --version | awk -F+ '{print "::set-output name=version::"$1}'
      - name: Build a binary wheel and a source tarball
        env:
          SETUPTOOLS_SCM_PRETEND_VERSION: {% raw %}${{ steps.non_local_version.outputs.version }}{% endraw %}
        run: >-
          python -m
          pep517.build
          --source
          --binary
          --out-dir dist/
          .
      # push all versions on master to test.pypi.org
      - name: Publish package to TestPyPI
        continue-on-error: true
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: {% raw %}${{ secrets.test_pypi_password }}{% endraw %}
          repository_url: https://test.pypi.org/legacy/

  # DEPLOY TO PYPI ON SUCCESS
  deploy:
    needs: [tests, typing]
    name: deploy to pypi
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python {% raw %}${{ matrix.python-version }}{% endraw %}
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
      - name: Install pep517
        run: >-
          python -m
          pip install
          pep517
          --user
      - name: Build a binary wheel and a source tarball
        run: >-
          python -m
          pep517.build
          --source
          --binary
          --out-dir dist/
          .
      # push all tagged versions to pypi.org
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: {% raw %}${{ secrets.pypi_password }}{% endraw %}
